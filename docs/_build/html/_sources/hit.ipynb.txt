{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Factors Influencing HIT ##"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**BETA RELEASE**\n",
    "\n",
    "*This project remains in the experimental stage and there are likely many tweaks to come that will improve/change outcomes. I do believe at this stage that the simulation provides good general insights regarding the relationship between various factors and viral spread.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**REPLICABILITY**\n",
    "\n",
    "*Randomness is in an important factor in RKnot's approach to simulation (and frankly in real-word viral transmission), so the results of the sims below will not be repeatable with each iteration. The below examples are meant to show general differences based on state; further analysis should run the same simulation multiple times to see the mean impact.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SARS-COV-2**\n",
    "\n",
    "*While sars-cov-2 is obviously topical globally, the goal of RKnot is to be applicable to any virus (or anything that spreads like a virus). sars-cov-2 is used only for illustration purposes.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Base US Simulation ###\n",
    "\n",
    "To explore the various concepts of RKnot and viral spread, we'll use a simulation design based on [CDC Best Planning Scenario](https://www.cdc.gov/coronavirus/2019-ncov/hcp/planning-scenarios.html) guidelines for\n",
    "COVID-19 characteristics including:\n",
    "\n",
    "* $R_0$ 2.5\n",
    "* IFR for each of 4 age groups\n",
    "    * 0-19: 0.003%\n",
    "    * 20-49: 0.02%\n",
    "    * 50-69: 0.5%\n",
    "    * 70+: 5.4%\n",
    "\n",
    "Other assumptions:\n",
    "\n",
    "* Population of $10,000^1$\n",
    "* Initial Infected of 2\n",
    "* Duration of Infectiousness 14 days$^2$\n",
    "* Duration of Immunity 365 days\n",
    "* Density of ~1 subject per location (`dlevel='med'`)\n",
    "\n",
    "$^1$*proportionately split among the 4 age groups to match US census data.*\n",
    "\n",
    "$^2$*equal likelihood of transmission on any day (i.e. no viral load curve)*\n",
    "\n",
    "[US Census Data](https://www.census.gov/prod/cen2010/briefs/c2010br-03.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Natural ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Equal ####\n",
    "The first simulation makes the most homogeneous assumptions. \n",
    "\n",
    "+ No group is restricted in terms of movement. \n",
    "+ All dots are able to interact with one another. \n",
    "+ All dots are susceptible at initiation.\n",
    "+ All dots are equally likely to move to any dot on the grid (`mover='equal'`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "import matplotlib\n",
    "matplotlib.use('Qt5Agg')\n",
    "\n",
    "from matplotlib.animation import FFMpegWriter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "RUN = True\n",
    "SHOW_CHARTS = False\n",
    "SAVE_CHARTS = True\n",
    "PATH = 'vids/baseus/'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The basic layout is below. These parameters can also be imported from `rknot.sims.baseus` for convenienve.\n",
    "\n",
    "```python\n",
    "group1 = dict(\n",
    "    name='0-19',\n",
    "    n=2700,\n",
    "    n_inf=0,\n",
    "    ifr=0.00003,\n",
    "    mover='equal',\n",
    ")\n",
    "group2 = dict(\n",
    "    name='20-49',\n",
    "    n=4100,\n",
    "    n_inf=1,\n",
    "    ifr=0.0002,\n",
    "    mover='equal',\n",
    ")\n",
    "group3 = dict(\n",
    "    name='50-69',\n",
    "    n=2300,\n",
    "    n_inf=1,\n",
    "    ifr=0.005,\n",
    "    mover='equal',\n",
    ")\n",
    "group4 = dict(\n",
    "    name='70+',\n",
    "    n=900,\n",
    "    n_inf=0,\n",
    "    ifr=0.054,\n",
    "    mover='equal',\n",
    ")\n",
    "groups = [group1, group2, group3, group4]\n",
    "params = {'dlevel': 'med', 'Ro':2.5, 'days': 365, 'imndur': 365, 'infdur': 14}\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "from rknot.sims.baseus import params, groups\n",
    "from rknot import Sim, Chart\n",
    "# sim = Sim(groups=groups, details=True, **params)\n",
    "for group in groups:\n",
    "    group['mover'] = 'equal'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot import Sim, Chart\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-16 23:17:22,257\tINFO resource_spec.py:223 -- Starting Ray with 12.01 GiB memory available for workers and up to 6.02 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-16 23:17:22,701\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------------------------------\n",
      "|                                  SIM DETAILS                                  |\n",
      "|-------------------------------------------------------------------------------|\n",
      "|           boundary|  [  1 100   1 100]|             n_locs|              10000|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|                  n|              10000|            density|                1.0|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|                ktr|                1.0|                   |                   |\n",
      "|-------------------|-------------------|-------------------|-------------------|\n"
     ]
    }
   ],
   "source": [
    "sim = Sim(groups=groups, details=True, **params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Running the animation will result in a video as per below:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "sim.run()\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if RUN:\n",
    "    sim.run()\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save(PATH + '/1.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/1.mp4' controls>alternative text</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Note embedded videos are used for convenience purposes. Given the random processes involved, running the same code will produce slightly different results each time.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The sim results in a relatively standard spread curve with \n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   41% |\n",
    "| HIT      | 65%      |\n",
    "| Fatalities | 0.52%      |\n",
    "\n",
    "You'll note this is slightly higher than the expected HIT of 60% for $R_0$ 2.5. The differences result given:\n",
    "\n",
    "1. The simulation is a stochastic process and random variation will result in variation from the mathematical model in smaller populations.\n",
    "2. This is not an entirely homogeneous population, with different IFRs and different numbers of contacts between subjects."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Local ####\n",
    "In remaining simulations, we begin to introduce ever increasing homogeneity.\n",
    "\n",
    "Our first change is to adjust the subjects mover functions to `local`. The `local` mover has a strong bias towards locations only in its immediate vicinity, which is a better approximation of real world processes (though certainly not a perfect one)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group1['mover'] = 'local'\n",
    "group2['mover'] = 'local'\n",
    "group3['mover'] = 'local'\n",
    "group4['mover'] = 'local'\n",
    "groups = [group1, group2, group3, group4]\n",
    "\n",
    "sim = Sim(groups=groups, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7f94bb7b37ba4ca58fe398a4383419bb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4618ca5e6fd2468082018517b79ec5e5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=408.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "NameError",
     "evalue": "name 'PATH' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-ba3d487b6fd5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mchart\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mChart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_init_func\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# if SAVE_CHARTS:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mchart\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manimate\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPATH\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'tests/2.mp4'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwriter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFFMpegWriter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'PATH' is not defined"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "### HIDDEN ###\n",
    "if RUN:\n",
    "    from rknot.sims.baseus import params, groups\n",
    "    from rknot import Sim, Chart\n",
    "    for group in groups:\n",
    "        group['mover'] = 'local'\n",
    "\n",
    "    sim = Sim(groups=groups, **params)\n",
    "    sim.run()\n",
    "\n",
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '2.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/2.mp4' controls>Video Failed To Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   5% |\n",
    "| HIT      | 49%      |\n",
    "| Fatalities | 0.38%      |\n",
    "\n",
    "We can see that restricting movement has a major impact on spread, creating a much longer, flatter curve with very low peak infection and a lower HIT than $R_0$ would suggest. Fatalities have also reduced by ~25% from [Example 1](#Equal).\n",
    "\n",
    "The virus does remain among the population, however, resulting in high penetration and relatively high fatalities. For comparison a 0.38% fatality rate is equivalent to >1MM deaths across the US.\n",
    "\n",
    "So while HIT is an important consideration, it should not be the sole focus if the ultimate goal is to reduce fatalities.\n",
    "\n",
    "*CAUTION: RKnot estimates transmission rate assuming all subjects are* `equal` *movers. Thus, where* `local` *movers are used, the transmission rate may (or may not) be underestimated.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Social  ####\n",
    "In this simulation, we set `mover=social` for just the 20-49 age group. This is a rough approximation of that group's real-world propensity to travel more frequently (or go to more events)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group1['mover'] = 'local'\n",
    "group2['mover'] = 'social'\n",
    "group3['mover'] = 'local'\n",
    "group4['mover'] = 'local'\n",
    "groups = [group1, group2, group3, group4]\n",
    "\n",
    "sim = Sim(groups=groups, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if RUN:\n",
    "    groups[1]['mover'] = 'social'\n",
    "    \n",
    "    sim = Sim(groups=groups, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/3.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/3.mp4' controls>Video Failed To Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   34% |\n",
    "| HIT      | 62%      |\n",
    "| Fatalities | 0.61%      |\n",
    "\n",
    "We can see how powerful mixing is within a population. Even with the majority of subjects moving only locally, if a small group of subjects is moving more broadly across the space, it will significantly increase the rate of spread."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Pre-Existing Immunity ####\n",
    "In this scenario, we adjust the susceptibility factor for just two groups by relatively small amounts as follows:\n",
    "\n",
    "+ 20-49: 80%\n",
    "+ 50-69: 65%\n",
    "\n",
    "This means, in the inverse, that 10% and 25% of the subjects in the respective groups are already immune to the virus (whether through pre-existing T-cell immunity, anti-bodies, or otherwise).\n",
    "\n",
    "The older group is assumed to have a lower susceptibility factor as it is more likely that older people will have had more exposure to similar viruses over their lifetime.\n",
    "\n",
    "T-cell immunity to sars-cov-2 remains a controversial subject, but [many studies](https://www.bmj.com/content/370/bmj.m3563) have found prevalance of T-cells between 20% - 50% in *people unexposed to sars-cov-2*. It is suggested that exposure to \"common cold\" coronaviruses (or more dangerous ones) may convey this immunity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group2['susf'] = .8\n",
    "group3['susf'] = .65\n",
    "groups = [group1, group2, group3, group4]\n",
    "\n",
    "sim = Sim(groups=groups, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True) \n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if RUN:\n",
    "    groups[1]['susf'] = .8\n",
    "    groups[2]['susf'] = .65\n",
    "\n",
    "    sim = Sim(groups=groups, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True) \n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/4.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/4.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   21% |\n",
    "| HIT      | 44%      |\n",
    "| Fatalities | 0.49%      |\n",
    "\n",
    "We can see that pre-existing immunity would significantly reduce HIT ... but again reducing HIT does not impact the fatality rate as much as one might expect.\n",
    "\n",
    "Comparing to Example [3](#Social), HIT reduced by a third and fatalities declined by only a sixth.\n",
    "\n",
    "In this sim specifically, this results at least in part from the fact the elderly are assumed to *not* have pre-existing immunity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Events ####\n",
    "Certainly, the vast majority of people in the US do not move in such pre-defined ways as set out by the `mover` function. In reality, people tend to move with a local bias with a small number of interactions, supplemented by larger movements to locations with a large number of interactions in a small amount of time.\n",
    "\n",
    "In RKnot, we can simulate this with [Event objects](concepts.ipynb#Events). And we will incorporate a number of them in this simulation. \n",
    "\n",
    "First, we will reset our group parameters by importing from `sims.baseus`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we will instantiate a handful of events recurring periodically over the duration of the sim."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.sims.baseus import params, groups\n",
    "\n",
    "from rknot.events import Event\n",
    "\n",
    "school1 = Event(name='school1', xy=[25,42], start_tick=2, groups=[0], capacity=10, recurring=2)\n",
    "school2 = Event(name='school2', xy=[78,82], start_tick=3, groups=[0], capacity=10, recurring=2)\n",
    "game = Event(name='game', xy=[50,84], start_tick=6, groups=[0,1,2], capacity=100, recurring=14)\n",
    "concert1 = Event(name='concert1', xy=[20,20], start_tick=7, groups=[1], capacity=50, recurring=14)                 \n",
    "concert2 = Event(name='concert2', xy=[91,92], start_tick=21, groups=[1], capacity=50, recurring=14)\n",
    "bar = Event(name='bar', xy=[17,24], start_tick=4, groups=[1], capacity=5, recurring=7)\n",
    "bar2 = Event(name='bar2', xy=[87,13], start_tick=5, groups=[1], capacity=5, recurring=7)\n",
    "bar3 = Event(name='bar3', xy=[52,89], start_tick=6, groups=[1,2], capacity=5, recurring=7)\n",
    "church = Event(name='church', xy=[2,91], start_tick=7, groups=[2,3], capacity=20, recurring=7)\n",
    "\n",
    "events = [school1, school2, game, concert1, concert2, bar, bar2, bar3, church]\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "45c3f782b09f4a33b4ed12bf1698619e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims.baseus import params, groups, events\n",
    "\n",
    "    sim = Sim(groups=groups, events=events, **params)\n",
    "    sim.run()\n",
    "\n",
    "\n",
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '5.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/5.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   22% |\n",
    "| HIT      | 52%      |\n",
    "| Fatalities | 0.48%      |\n",
    "\n",
    "We can see that this sort of event-based structure resulted in lower peak infections and HIT relative to [Example 1](#Equal) & [Example 3](#Social). The curve is flatter and longer. \n",
    "\n",
    "This scenario are not perfectly substitutable with [Example 1](#Equal). For example, lower spread might result because there are fewer contacts. BUT this scenario actually results in more total interactions between subjects than the prior ones:\n",
    "\n",
    "Avg Number of Contacts per Subject:\n",
    "\n",
    "Example 1: 50.3\n",
    "\n",
    "Example 2: 51.7 \n",
    "\n",
    "Example 3: 53.8\n",
    "\n",
    "Example 5: 56.5\n",
    "\n",
    "*Average of first 100 days across 5 sims for each scenario.*\n",
    "\n",
    "Other issues with substitutability may exist and are being explored. SIR models determine R0 in the idealized environment of Example 1 and so may not be suitable for customized environments such as this one.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. Gates ####\n",
    "We can further improve the real world relevance of interactions by introducing [gates](concepts.ipynb#Gates). Subjects are not always freely able to interact with all other people in a population. Often their movement is restricted to within certain areas. Furthermore, other people's access into those areas is restricted.\n",
    "\n",
    "Elderly people living in retirement homes or assisted living centers is an example. To simulate this, we will split `group4` into two separate groups. \n",
    "\n",
    "* `group4a`\n",
    "    * population of 600 (2/3s of `group4`) \n",
    "    * IFR of 4.2%\n",
    "    * move freely throughout the entire grid as previously\n",
    "* `group4b` \n",
    "    * population of 300 (1/3rd of `group4`)\n",
    "    * IFR of 7.8%\n",
    "    * movement restricted to 6x6 box\n",
    "\n",
    "We have also adjusted the IFR on the basis that `group4b` is likely older and also probably more frail than `group4a`. IFRs approximate those found [here](https://www.publichealthontario.ca/-/media/documents/ncov/epi/2020/06/covid19-epi-case-identification-age-only-template.pdf?la=en).\n",
    "\n",
    "In addition, we will update certain events to account for the additional group including adding an event specifically for the new group."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group4a = dict(\n",
    "    name='70+',\n",
    "    n=600,\n",
    "    n_inf=0,\n",
    "    ifr=0.042,\n",
    "    mover='local',\n",
    ")\n",
    "group4b = dict(\n",
    "    name='70+G',\n",
    "    n=300,\n",
    "    n_inf=0,\n",
    "    ifr=0.0683,\n",
    "    mover='local',\n",
    "    box=[1,6,1,6],\n",
    "    box_is_gated=True,\n",
    ")\n",
    "groups = [group1, group2, group3, group4a, group4b]\n",
    "\n",
    "game = Event(name='game', xy=[50,84], start_tick=6, groups=[0,1,2,3], capacity=100, recurring=14)\n",
    "church = Event(name='church', xy=[2,91], start_tick=7, groups=[2,3], capacity=20, recurring=7)\n",
    "church2 = Event(name='church', xy=[2,3], start_tick=7, groups=[4], capacity=5, recurring=7)\n",
    "\n",
    "events = [game, concert1, concert2, bar, bar2, bar3, church, church2]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, such elderly populations are not totally sealed of from the rest of the world. In fact, they are often visited by family members or friends. We can mimick this with the use of a Travel object.\n",
    "\n",
    "In this sim, at least one person will enter into the `group4b` gate for a day only. And this will repeat every day of the sim."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import Travel\n",
    "\n",
    "visit = Travel(name='visit', xy=[1,1], start_tick=3, groups=[1,2], capacity=1, duration=1, recurring=1)\n",
    "events.append(visit)\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "882db75ada59422b98fccea63c36a92a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "91a205ed5d914a0da605986ac34c7564",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=236.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims.baseus import params, events_gated, groups_gated\n",
    "    \n",
    "    sim = Sim(groups=groups_gated, events=events_gated, **params)\n",
    "    sim.run()\n",
    "\n",
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + '6.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/6.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   26% |\n",
    "| HIT      | 51%      |\n",
    "| Fatalities | 0.58%      |\n",
    "\n",
    "This gated structure results in a similar curve to [Example 5](#Events), however, it does result in more fatalities as an outbreak occurs in the most susceptible 70+G group inside the gate. The use for this structure will become more evident in the disucssion on [Policy Decisions.](#Policy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7. Events, Gates, and Pre-Immunity ####\n",
    "Now we can see how pre-immunity might impact viral spread in a population with more heterogeneous interactions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group2['susf'] = .8\n",
    "group3['susf'] = .65\n",
    "groups = [group1, group2, group3, group4a, group4b]\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "83c3b4042935486c8e368bc137282ebb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "152156cc6c4d492591bea667a1358326",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=237.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims.baseus import groups_gated, events_gated, params\n",
    "    groups_gated[1]['susf'] = .8\n",
    "    groups_gated[2]['susf'] = .65\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_gated, **params)\n",
    "    sim.run()\n",
    "\n",
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + 'tests/7.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/7.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   14% |\n",
    "| HIT      | 22%      |\n",
    "| Fatalities | 0.57%      |\n",
    "\n",
    "So once again we see that pre-existing immunity would have the effect of reducing peak infections and HIT.\n",
    "\n",
    "Still, fatalities were not impacted because of an outbreak in '70+G' age group (which you can see from the full grey square in the bottom left hand corner of the grid) ... this despite the gated area and limiting travel to one visitor a day."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 8. Self Aware Social Distancing ####\n",
    "In a self-aware population, we can also incorporate an assumption that certain members of the population will implement social distancing practices (even in the absence of prescribed government policy). For example, individuals might wear masks or face shields while in public. \n",
    "\n",
    "This is implemented via a SocialDistancing object, which reduces the transmission factor of the subjects in the applicable group."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import SocialDistancing as SD\n",
    "\n",
    "sd = SD(name='6-feet', tmfs=[.975,.95,.75,.5], groups=[1,2,3,4], start_tick=5, duration=90)\n",
    "events.append(sd)\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if RUN:\n",
    "    from rknot.events import SocialDistancing as SD\n",
    "\n",
    "    sd = SD(name='6-feet', tmfs=[.975,.95,.75,.5], groups=[1,2,3,4], start_tick=5, duration=90)\n",
    "    events_gated.append(sd)\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_gated, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/8.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/8.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   18% |\n",
    "| HIT      | 35%      |\n",
    "| Fatalities | 0.38%      |\n",
    "\n",
    "Here we can see that social distancing in the broader population had almost no impact on peak infections or HIT.\n",
    "\n",
    "**BUT** social distancing among the most susceptible (i.e. `group4b`) was a key factor in a dramatically reduced fatality rate.\n",
    "\n",
    "Essentially, in this simulation, social distancing prevented an outbreak in the `group4b` community (whereas outbreaks had previously occured there in prior sims)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9. Isolation ####\n",
    "TBD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 10. Infectiousness Curve ####\n",
    "TBD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Policy ###\n",
    "\n",
    "With a more realistic model of subject interaction, we can begin to experiment with the impact of different policy measures.\n",
    "\n",
    "RKnot can simulate policy measures via `Restriction`, `SocialDistancing`, and `Quarantine` objects. Further details [here](concepts.ipynb#Restrictions).\n",
    "\n",
    "The simulations are based on [this scenario](#Gates) and so the impact of the policy measures contemplated should be considered relative to that scenario.\n",
    "\n",
    "The structure can be imported as follows:\n",
    "\n",
    "```python\n",
    "from rknot.sims.baseus import params, events_gated, groups_gated\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "import matplotlib\n",
    "matplotlib.use('Qt5Agg')\n",
    "\n",
    "from matplotlib.animation import FFMpegWriter\n",
    "\n",
    "from rknot import Sim, Chart\n",
    "from rknot.sims.baseus import params, events_gated, groups_gated"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Restrict Large Gatherings ####\n",
    "We'll start by simply restricting large gathers, which for this sim is any event with 10+ capacity (0.1% of the entire population). The restrictions will last for 60 days.\n",
    "\n",
    "When considering capacity, remember that a 100,000-seat stadium in a 10 million person catchment represents 1% of the population.\n",
    "\n",
    "We assume this policy are implemented on day 30, when the population finally realizes there is a pandemic and government has had time to implement prevention measures.\n",
    "\n",
    "The restriction will last for 60 days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import Restriction\n",
    "\n",
    "large_gatherings = Restriction(\n",
    "    name='large', start_tick=30, duration=60, criteria={'capacity': 10}\n",
    ")\n",
    "events_w_res = events_gated + [large_gatherings]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, details=True, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-17 00:09:38,928\tINFO resource_spec.py:223 -- Starting Ray with 10.01 GiB memory available for workers and up to 5.01 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-17 00:09:39,370\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------------------------------\n",
      "|                                  SIM DETAILS                                  |\n",
      "|-------------------------------------------------------------------------------|\n",
      "|           boundary|  [  1 100   1 100]|             n_locs|              10000|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|                  n|              10000|            density|                1.0|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|                ktr|                1.0|                   |                   |\n",
      "|-------------------|-------------------|-------------------|-------------------|\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a346e630e56e4ecfa0255f508f054c84",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "05443434a0664ccebf1ae0b20b26dc8a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=259.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot.events import Restriction\n",
    "\n",
    "    large_gatherings = Restriction(\n",
    "        name='large', start_tick=30, duration=60, criteria={'capacity': 10}\n",
    "    )\n",
    "    events_w_res = events_gated + [large_gatherings]\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_w_res, details=True, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/large.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/large.mp4' controls>Video Failed to Load</video>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   19% |\n",
    "| HIT      | 48%      |\n",
    "| Fatalities | 0.38%      |\n",
    "\n",
    "We see that the curve is flattened significanlty during the restriction period and the peak of infections has been pushed way out to 100+ days. As the restriction is lifted, however, the outbreak ensues. Notice that the 70+G region was spared from the outbreak until ~100 days, when a wave of infections quickly increased the fatality rate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Restrict Elderly Visits ####\n",
    "We can restrict events by name by passing `name` key to `criteria`. We can do this to restrict the travel event to the `70+G` area. \n",
    "\n",
    "The policy measure is implemented on day 30 and maintained for another 120 days. There will be no other restrictions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "no_visits = Restriction(\n",
    "    name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    ")\n",
    "events_w_res = events_gated + [no_visits]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-17 00:14:24,870\tINFO resource_spec.py:223 -- Starting Ray with 10.3 GiB memory available for workers and up to 5.15 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-17 00:14:25,273\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d7a6c39ed23a4bfdb3591b5aa22d637c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1795aafbbe824dedbf7bd83e010d4a9b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=224.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot.events import Restriction    \n",
    "    no_visits = Restriction(\n",
    "        name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    "    )\n",
    "    events_w_res = events_gated + [no_visits]\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/no_visits.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/no_visits.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   23% |\n",
    "| HIT      | 46%      |\n",
    "| Fatalities | 0.33%      |\n",
    "\n",
    "Interestingly despite having a higher peak and HIT level than prior examples, we see that *fatalities are the lowest of any sim run to this point*. The most susceptible are protected during the peak and the virus has \"burned out\" fast enough that they are not infected when visits resume.\n",
    "\n",
    "We can see here that allowing a *high level of infection* among the **least susceptible** has resulted in a *low level of fatalities* among the **most susceptible**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Social Distancing ####\n",
    "We can mimick the implementation of Social Distancing policies in certain settings via the `SocialDistancing` object. Mask wearing, hand sanitizing, and 6-foot perimeters all provide varying levels of protection.\n",
    "\n",
    "It is hard to estimate the degree of protection from each, and even harder in combination. For instance, [this study](https://pubmed.ncbi.nlm.nih.gov/23498357/) found anywhere between a 1.1- and 55-fold reduction in exposure to influenza with varying mask designs.\n",
    "\n",
    "So we provide `tmfs` here for illustration purposes only, attempting to catch all social distancing practices. We also provide different `tmfs` for the different age groups, meant to simulate adherence to policy.\n",
    "\n",
    "The policy measure is implemented on day 30 and maintained for 120 days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import SocialDistancing as SD\n",
    "\n",
    "sd = SD(name='all', tmfs=[.8,.8,.7,.65,.5], groups=[0,1,2,3,4], start_tick=30, duration=120)\n",
    "events_w_res = events_gated + [sd]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-17 00:19:03,697\tINFO resource_spec.py:223 -- Starting Ray with 10.11 GiB memory available for workers and up to 5.07 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-17 00:19:04,112\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b085723ddb9049f8a8216e9bfc7ca03a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "26733059671e4bb7b58d02d59b107470",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=340.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot.events import SocialDistancing as SD\n",
    "\n",
    "    sd = SD(name='all', tmfs=[.8,.8,.7,.65,.5], groups=[0,1,2,3,4], start_tick=30, duration=120)\n",
    "    events_w_res = events_gated + [sd]\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/policy_sd.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "       src='https://storage.googleapis.com/rknotvids/baseus/policy_sd.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   19% |\n",
    "| HIT      | 63%      |\n",
    "| Fatalities | 0.58%      |\n",
    "\n",
    "We can see that social distancing is certainly the most effective approach in terms of \"flattening the curve\" with the infection peak pushed all the way out to 190+ days. \n",
    "\n",
    "Yet again, though, we see infections dramatically rise after the social distancing restrictions are lifted (180 days). \n",
    "\n",
    "In addition, there was an outbreak in the 70+G area, which resulted in a much higher fatality rate than other approaches."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Social Distancing and Restrict Elderly Visits and Large Gatherings ####\n",
    "What happens if we combine the three approaches above?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "large_gatherings = Restriction(\n",
    "    name='large', start_tick=30, duration=60, criteria={'capacity': 10}\n",
    ")\n",
    "no_visits = Restriction(\n",
    "    name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    ")\n",
    "sd = SD(name='all', tmfs=[.8,.8,.7,.65,.5], groups=[0,1,2,3,4], start_tick=30, duration=120)\n",
    "events_w_res = events_gated + [large_gatherings, no_visits, sd]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-17 00:26:12,830\tINFO resource_spec.py:223 -- Starting Ray with 10.3 GiB memory available for workers and up to 5.16 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-17 00:26:13,263\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aa9c4039dde04c7095dccf7b626b4e8d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "152f5cbfbc0840c789cbad3e15691f4d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=379.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if RUN:\n",
    "    large_gatherings = Restriction(\n",
    "        name='large', start_tick=30, duration=60, criteria={'capacity': 10}\n",
    "    )\n",
    "    no_visits = Restriction(\n",
    "        name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    "    )\n",
    "    sd = SD(name='all', tmfs=[.8,.8,.7,.65,.5], groups=[0,1,2,3,4], start_tick=30, duration=120)\n",
    "    events_w_res = events_gated + [large_gatherings, no_visits, sd]\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/sd_&_no_large_&_no_visits.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/sd_%26_no_large_%26_no_visits.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   12% |\n",
    "| HIT      | 60%      |\n",
    "| Fatalities | 0.48%      |\n",
    "\n",
    "We can see that this combined approach results in the flattest curve yet. The peak does not occur until 180+ days.\n",
    "\n",
    "Importantly, however, this does not result in signficantly lower fatalities as an outbreak occurs in the `group4b` *after the visit restriction is lifted*. \n",
    "\n",
    "This outcome was actually *much worse* than simply [restricting elderly visits](#2.-Restrict-Elderly-Visits). This is a counter-intuitive result and highlights the benefit of *allowing spread among the less vulnerable*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Quarantine ####\n",
    "We can even mimick the impact of quarantines via the Quarantine object.\n",
    "\n",
    "Here we show the impact of a 30-day quarantine for all groups in the Sim."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import Quarantine\n",
    "\n",
    "quarantine = Quarantine(name='all', start_tick=30, groups=[0,1,2,3,4], duration=30)\n",
    "events_w_res = events_gated + [quarantine]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-17 00:34:48,172\tINFO resource_spec.py:223 -- Starting Ray with 10.64 GiB memory available for workers and up to 5.34 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-17 00:34:48,600\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d3ea5aeaa4be4c2c88b47b3d6d00ffca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0860947c920642bf8ea8f2adf1e6437a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=94.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    from rknot.events import Quarantine\n",
    "\n",
    "    quarantine = Quarantine(name='all', start_tick=30, groups=[0,1,2,3,4], duration=30)\n",
    "    events_w_res = events_gated + [quarantine]\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/quarantine.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "       src='https://storage.googleapis.com/rknotvids/baseus/quarantine.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   1% |\n",
    "| HIT      | 1%      |\n",
    "| Fatalities | 0%      |\n",
    "\n",
    "The pandemic never materializes in this simulation. The quarantine eradicates the virus swiftly. \n",
    "\n",
    "This is an interesting result. This obvioulsy did not occur in many places in the real world that took this approach. There are several possible reasons worth considering:\n",
    "\n",
    "* Random Variation: if you run this simulation multiple times, you will note some sims where spread does occur.\n",
    "* Scale: a larger simulation would increase the possibility that a very small number of subjects can continue to pass around the virus while it is muted in the broader population\n",
    "* Adherence: real-world adherence to the implemented policies was much lower than this simulation suggests.\n",
    "* Inconsistency: some areas implemented strict quarantines while others did not, and there was mixing among those populations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A Fulsome Scenario ###\n",
    "\n",
    "We'll now create a more fulsome scenario encompassing many of the factors discussed.\n",
    "\n",
    "Adjustments to prior scenarios include:\n",
    "\n",
    "* add additional group with `mover='social'` in the 20-49 cohort. this cohort also flaunts social distancing guidelines as so its tmf in the SD object is `1.25`\n",
    "* add susceptibility factors for most groups\n",
    "* more fine-tuned capacity restrictions that gradually allow larger events over time\n",
    "* restrict visits to the elderly for a full year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "### GROUPS ###\n",
    "group1 = dict(\n",
    "    name='0-19',\n",
    "    n=2700,\n",
    "    n_inf=0,\n",
    "    ifr=0.00003,\n",
    "    mover='local',\n",
    ")\n",
    "group2a = dict(\n",
    "    name='20-49L',\n",
    "    n=3900,\n",
    "    n_inf=1,\n",
    "    ifr=0.0002,\n",
    "    mover='local',\n",
    "    susf=0.85,    \n",
    ")\n",
    "group2b = dict(\n",
    "    name='20-49S',\n",
    "    n=200,\n",
    "    n_inf=1,\n",
    "    ifr=0.0002,\n",
    "    mover='social',\n",
    "    susf=0.85,    \n",
    ")\n",
    "group3 = dict(\n",
    "    name='50-69',\n",
    "    n=2300,\n",
    "    n_inf=1,\n",
    "    ifr=0.005,\n",
    "    susf=.7,\n",
    "    mover='local',\n",
    ")\n",
    "group4a = dict(\n",
    "    name='70+',\n",
    "    n=600,\n",
    "    n_inf=0,\n",
    "    ifr=0.042,\n",
    "    mover='local',\n",
    "    susf=0.9,    \n",
    ")\n",
    "group4b = dict(\n",
    "    name='70+G',\n",
    "    n=300,\n",
    "    n_inf=0,\n",
    "    ifr=0.0683,\n",
    "    mover='local',\n",
    "    box=[1,6,1,6],\n",
    "    box_is_gated=True,\n",
    ")\n",
    "groups = [group1, group2a, group2b, group3, group4a, group4b]\n",
    "params = {'dlevel': 'med', 'Ro':2.5, 'days': 365, 'imndur': 365, 'infdur': 14}\n",
    "\n",
    "### EVENTS ###\n",
    "from rknot.events import Event, Travel\n",
    "\n",
    "school1 = Event(name='school1', xy=[25,42], start_tick=2, groups=[0], capacity=10, recurring=2)\n",
    "school2 = Event(name='school2', xy=[78,82], start_tick=3, groups=[0], capacity=10, recurring=2)\n",
    "game = Event(name='game', xy=[50,84], start_tick=6, groups=[0,1,2,3], capacity=100, recurring=14)\n",
    "concert1 = Event(name='concert1', xy=[20,20], start_tick=7, groups=[1,2], capacity=50, recurring=14)                 \n",
    "concert2 = Event(name='concert2', xy=[91,92], start_tick=21, groups=[1,2], capacity=50, recurring=14)\n",
    "bar = Event(name='bar', xy=[17,24], start_tick=4, groups=[1,2], capacity=5, recurring=7)\n",
    "bar2 = Event(name='bar2', xy=[87,13], start_tick=5, groups=[1,2], capacity=5, recurring=7)\n",
    "bar3 = Event(name='bar3', xy=[52,89], start_tick=6, groups=[1,2,3], capacity=5, recurring=7)\n",
    "church = Event(name='church', xy=[2,91], start_tick=7, groups=[3,4], capacity=20, recurring=7)\n",
    "church2 = Event(name='church', xy=[2,3], start_tick=7, groups=[5], capacity=5, recurring=7)\n",
    "\n",
    "visit = Travel(name='visit', xy=[1,1], start_tick=3, groups=[1,2,3], capacity=1, duration=1, recurring=1)\n",
    "\n",
    "events = [\n",
    "    school1, school2,\n",
    "    game, concert1, concert2, bar, bar2, bar3, \n",
    "    church, church2, visit,\n",
    "]\n",
    "\n",
    "### RESTRICTIONS ###\n",
    "small_gatherings = Restriction(\n",
    "    name='small', start_tick=30, duration=30, criteria={'capacity': 5}\n",
    ")\n",
    "med_gatherings = Restriction(\n",
    "    name='med', start_tick=60, duration=30, criteria={'capacity': 10}\n",
    ")\n",
    "large_gatherings = Restriction(\n",
    "    name='large', start_tick=90, duration=30, criteria={'capacity': 50}\n",
    ")\n",
    "no_visits = Restriction(\n",
    "    name='no_visits', start_tick=30, duration=365, criteria={'name': 'visit'}\n",
    ")\n",
    "sd = SD(name='all', tmfs=[.8, .8, 1.25, .7,.65,.5], groups=[0,1,2,3,4,5], start_tick=30, duration=120)\n",
    "events_w_res = events + [small_gatherings, med_gatherings, large_gatherings, no_visits, sd]\n",
    "\n",
    "sim = Sim(groups=groups, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-17 00:37:13,724\tINFO resource_spec.py:223 -- Starting Ray with 10.3 GiB memory available for workers and up to 5.17 GiB for objects. You can adjust these settings with ray.init(memory=<bytes>, object_store_memory=<bytes>).\n",
      "2020-10-17 00:37:14,151\tINFO services.py:1191 -- View the Ray dashboard at \u001b[1m\u001b[32mlocalhost:8265\u001b[39m\u001b[22m\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3d56587b74a649c999ef4865b680a775",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0aa18489763246e097330dbe67fedbe2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=350.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "### HIDDEN ###\n",
    "if RUN:\n",
    "    ### GROUPS ###\n",
    "    group1 = dict(\n",
    "        name='0-19',\n",
    "        n=2700,\n",
    "        n_inf=0,\n",
    "        ifr=0.00003,\n",
    "        mover='local',\n",
    "    )\n",
    "    group2a = dict(\n",
    "        name='20-49L',\n",
    "        n=3900,\n",
    "        n_inf=1,\n",
    "        ifr=0.0002,\n",
    "        mover='local',\n",
    "        susf=0.85,    \n",
    "    )\n",
    "    group2b = dict(\n",
    "        name='20-49S',\n",
    "        n=200,\n",
    "        n_inf=1,\n",
    "        ifr=0.0002,\n",
    "        mover='social',\n",
    "        susf=0.85,    \n",
    "    )\n",
    "    group3 = dict(\n",
    "        name='50-69',\n",
    "        n=2300,\n",
    "        n_inf=1,\n",
    "        ifr=0.005,\n",
    "        susf=.7,\n",
    "        mover='local',\n",
    "    )\n",
    "    group4a = dict(\n",
    "        name='70+',\n",
    "        n=600,\n",
    "        n_inf=0,\n",
    "        ifr=0.042,\n",
    "        mover='local',\n",
    "        susf=0.9,    \n",
    "    )\n",
    "    group4b = dict(\n",
    "        name='70+G',\n",
    "        n=300,\n",
    "        n_inf=0,\n",
    "        ifr=0.0683,\n",
    "        mover='local',\n",
    "        box=[1,6,1,6],\n",
    "        box_is_gated=True,\n",
    "    )\n",
    "    groups = [group1, group2a, group2b, group3, group4a, group4b]\n",
    "    params = {'dlevel': 'med', 'Ro':2.5, 'days': 365, 'imndur': 365, 'infdur': 14}\n",
    "\n",
    "    ### EVENTS ###\n",
    "    from rknot.events import Event, Travel\n",
    "\n",
    "    school1 = Event(name='school1', xy=[25,42], start_tick=2, groups=[0], capacity=10, recurring=2)\n",
    "    school2 = Event(name='school2', xy=[78,82], start_tick=3, groups=[0], capacity=10, recurring=2)\n",
    "    game = Event(name='game', xy=[50,84], start_tick=6, groups=[0,1,2,3], capacity=100, recurring=14)\n",
    "    concert1 = Event(name='concert1', xy=[20,20], start_tick=7, groups=[1,2], capacity=50, recurring=14)                 \n",
    "    concert2 = Event(name='concert2', xy=[91,92], start_tick=21, groups=[1,2], capacity=50, recurring=14)\n",
    "    bar = Event(name='bar', xy=[17,24], start_tick=4, groups=[1,2], capacity=5, recurring=7)\n",
    "    bar2 = Event(name='bar2', xy=[87,13], start_tick=5, groups=[1,2], capacity=5, recurring=7)\n",
    "    bar3 = Event(name='bar3', xy=[52,89], start_tick=6, groups=[1,2,3], capacity=5, recurring=7)\n",
    "    church = Event(name='church', xy=[2,91], start_tick=7, groups=[3,4], capacity=20, recurring=7)\n",
    "    church2 = Event(name='church', xy=[2,3], start_tick=7, groups=[5], capacity=5, recurring=7)\n",
    "\n",
    "    visit = Travel(name='visit', xy=[1,1], start_tick=3, groups=[1,2,3], capacity=1, duration=1, recurring=1)\n",
    "\n",
    "    events = [\n",
    "        school1, school2,\n",
    "        game, concert1, concert2, bar, bar2, bar3, \n",
    "        church, church2, visit,\n",
    "    ]\n",
    "\n",
    "    ### RESTRICTIONS ###\n",
    "    small_gatherings = Restriction(\n",
    "        name='small', start_tick=30, duration=30, criteria={'capacity': 5}\n",
    "    )\n",
    "    med_gatherings = Restriction(\n",
    "        name='med', start_tick=60, duration=30, criteria={'capacity': 10}\n",
    "    )\n",
    "    large_gatherings = Restriction(\n",
    "        name='large', start_tick=90, duration=30, criteria={'capacity': 50}\n",
    "    )\n",
    "    no_visits = Restriction(\n",
    "        name='no_visits', start_tick=30, duration=365, criteria={'name': 'visit'}\n",
    "    )\n",
    "    sd = SD(name='all', tmfs=[.8, .8, 1.25, .7,.65,.5], groups=[0,1,2,3,4,5], start_tick=30, duration=120)\n",
    "    events_w_res = events + [small_gatherings, med_gatherings, large_gatherings, no_visits, sd]\n",
    "\n",
    "    sim = Sim(groups=groups, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save('vids/baseus/fulsome.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "       src='https://storage.googleapis.com/rknotvids/baseus/fulsome.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This results in:\n",
    "\n",
    "|         |            |\n",
    "| ------------- |:-------------:|\n",
    "| Peak      |   14% |\n",
    "| HIT      | 35%      |\n",
    "| Fatalities | 0.23%      |\n",
    "\n",
    "The virus barely survives for the first 6-months of the outbreak, then as per other scenarios, once restrictions are lifted an outbreak occurs. Still, when the outbreak does occur, it is characterized by one of the lowest peaks and HITs in our analysis (due in part to the pre-immmunity of some of the groups).\n",
    "\n",
    "And it achieves the lowest fatality rate of the group, mainly by restricting access to the elderly population for the duration of the pandemic and ensuring an outbreak never occurs in that region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/spindicate/Documents/programming/rknot/docs/docs/hit.ipynb'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "dir_ = os.getcwd()\n",
    "dir_docs = dir_ + '/docs/docs'\n",
    "filename = '/hit.ipynb'\n",
    "\n",
    "from shutil import copyfile\n",
    "copyfile(dir_ + filename, dir_docs + filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
