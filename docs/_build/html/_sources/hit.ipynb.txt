{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Factors Influencing Spread ##"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**BETA RELEASE**\n",
    "\n",
    "*This project remains in the experimental stage and there are likely many tweaks to come that will improve/change outcomes. I do believe at this stage that the simulation provides good general insights regarding the relationship between various factors and viral spread.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**REPLICABILITY**\n",
    "\n",
    "*Randomness is in an important factor in RKnot's approach to simulation (and frankly in real-word viral transmission), so the results of the sims below will not be repeatable with each iteration. The below examples are meant to show general differences based on state; further analysis should run the same simulation multiple times to see the mean impact.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SARS-COV-2**\n",
    "\n",
    "*While sars-cov-2 is obviously topical globally, the goal of RKnot is to be applicable to any virus (or anything that spreads like a virus). sars-cov-2 is used only for illustration purposes.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Base US Simulation ###\n",
    "\n",
    "To explore the various concepts of RKnot and viral spread, we'll use a simulation design based on [CDC Best Planning Scenario](https://www.cdc.gov/coronavirus/2019-ncov/hcp/planning-scenarios.html) guidelines for\n",
    "COVID-19 characteristics including:\n",
    "\n",
    "* $R_0$ 2.5\n",
    "* IFR for each of 4 age groups\n",
    "    * 0-19: 0.003%\n",
    "    * 20-49: 0.02%\n",
    "    * 50-69: 0.5%\n",
    "    * 70+: 5.4%\n",
    "\n",
    "Other assumptions:\n",
    "\n",
    "* Population of $10,000^1$\n",
    "* Initial Infected of 2\n",
    "* Duration of Infectiousness 14 days$^2$\n",
    "* Duration of Immunity 365 days\n",
    "* Density of ~1 subject per location (`dlevel='med'`)\n",
    "\n",
    "$^1$*proportionately split among the 4 age groups to match US census data.*\n",
    "\n",
    "$^2$*equal likelihood of transmission on any day (i.e. no viral load curve)*\n",
    "\n",
    "[US Census Data](https://www.census.gov/prod/cen2010/briefs/c2010br-03.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Natural ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Equal ####\n",
    "The first simulation makes the most homogeneous assumptions. \n",
    "\n",
    "+ No group is restricted in terms of movement. \n",
    "+ All dots are able to interact with one another. \n",
    "+ All dots are susceptible at initiation.\n",
    "+ All dots are equally likely to move to any dot on the grid (`mover='equal'`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "import matplotlib\n",
    "matplotlib.use('Qt5Agg')\n",
    "\n",
    "from matplotlib.animation import FFMpegWriter\n",
    "\n",
    "def modulereload(modulename):\n",
    "    import imp\n",
    "    imp.reload(modulename)\n",
    "    \n",
    "def perstr(val):\n",
    "    return '{0:.0%}'.format(val)\n",
    "def fatstr(val):\n",
    "    return '{0:.2%}'.format(val)\n",
    "\n",
    "from IPython.display import display, Markdown, Latex\n",
    "def md(value):\n",
    "    return display(Markdown(value))\n",
    "\n",
    "def get_results(sim):\n",
    "    peak = perstr(sim.log['curr_per'].max())\n",
    "    i_peak = sim.log['curr_per'].argmax()\n",
    "    hit = perstr(sim.log['ever_per'][i_peak])\n",
    "    total = perstr(sim.log['ever_per'][sim.i_tick - 2])\n",
    "    fat = fatstr(sim.log['dep_per'][sim.i_tick - 2])\n",
    "    ifr = fatstr((1 / sim.log['ever_per'][sim.i_tick - 2] ) * sim.log['dep_per'][sim.i_tick - 2])\n",
    "    days_to_peak = str(i_peak)\n",
    "    \n",
    "    group_deps = sim.log['group_dep'][sim.i_tick - 2]\n",
    "    _70 = group_deps[-2:].sum() if group_deps.shape[0] == 5 else group_deps[-1]\n",
    "    _70 = perstr(_70/100)\n",
    "    \n",
    "    return [peak, hit, total, fat, _70, ifr, days_to_peak]\n",
    "\n",
    "def results_table(*args):\n",
    "    table = 'Results: \\n\\n'\n",
    "    table += '|      |      |'\n",
    "    table += ' \\n'\n",
    "    table += '| ------------- |:-------------:|'\n",
    "    table += ' \\n'\n",
    "    table += '| Peak      |   {} |'\n",
    "    table += ' \\n'\n",
    "    table += '| HIT      | {}      |'\n",
    "    table += ' \\n'\n",
    "    table += '| Total      | {}      |'\n",
    "    table += ' \\n'\n",
    "    table += '| Fatalities | {}      |'\n",
    "    table += ' \\n'\n",
    "    table += '| % > 70 | {}      |'\n",
    "    table += ' \\n'    \n",
    "    table += '| IFR | {}      |'\n",
    "    table += ' \\n'    \n",
    "    table += '| Days to Peak |   {} |'\n",
    "    table += ' \\n'\n",
    "\n",
    "    table = table.format(*args)\n",
    "    \n",
    "    return table\n",
    "\n",
    "def move_to_doc_folder():\n",
    "    import os\n",
    "    dir_ = os.getcwd()\n",
    "    dir_docs = dir_ + '/docs/docs'\n",
    "    filename = '/hit.ipynb'\n",
    "\n",
    "    from shutil import copyfile\n",
    "    copyfile(dir_ + filename, dir_docs + filename)\n",
    "\n",
    "import shelve\n",
    "file = 'vids/baseus/tables'\n",
    "# db.close()\n",
    "db = shelve.open(file, writeback=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "IMPORT = False\n",
    "RUN = False\n",
    "SAVE = False\n",
    "SHOW_CHARTS = False\n",
    "SAVE_CHARTS = False\n",
    "PATH = 'vids/baseus/tests/'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The basic layout is below. These parameters can also be imported from `rknot.sims.baseus` for convenienve.\n",
    "\n",
    "```python\n",
    "group1 = dict(\n",
    "    name='0-19',\n",
    "    n=2700,\n",
    "    n_inf=0,\n",
    "    ifr=0.00003,\n",
    "    mover='equal',\n",
    ")\n",
    "group2 = dict(\n",
    "    name='20-49',\n",
    "    n=4100,\n",
    "    n_inf=1,\n",
    "    ifr=0.0002,\n",
    "    mover='equal',\n",
    ")\n",
    "group3 = dict(\n",
    "    name='50-69',\n",
    "    n=2300,\n",
    "    n_inf=1,\n",
    "    ifr=0.005,\n",
    "    mover='equal',\n",
    ")\n",
    "group4 = dict(\n",
    "    name='70+',\n",
    "    n=900,\n",
    "    n_inf=0,\n",
    "    ifr=0.054,\n",
    "    mover='equal',\n",
    ")\n",
    "groups = [group1, group2, group3, group4]\n",
    "params = {'dlevel': 'med', 'Ro':2.5, 'days': 365, 'imndur': 365, 'infdur': 14}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We instantiate a new sim by passing `groups` and `params`. We can also flag `details` to get some information about the Sim structure."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot import Sim, Chart\n",
    "sim = Sim(groups=groups, details=True, **params)\n",
    "sim.run()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------------------------------\n",
      "|                                  SIM DETAILS                                  |\n",
      "|-------------------------------------------------------------------------------|\n",
      "|           Boundary|  [  1 100   1 100]|          Locations|             10,000|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|         Population|             10,000|            Density|                1.0|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|       Contact Rate|                1.0|                   |                   |\n",
      "|-------------------|-------------------|-------------------|-------------------|\n"
     ]
    }
   ],
   "source": [
    "### HIDDEN ###\n",
    "if IMPORT:\n",
    "    from rknot.sims.baseus import params, groups\n",
    "    from rknot import Sim, Chart\n",
    "\n",
    "    for group in groups:\n",
    "        group['mover'] = 'equal'\n",
    "        \n",
    "    sim = Sim(groups=groups, details=True, **params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Running the animation will result in a video as per below:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "af676abf05b54d2d8da23b593ea5885c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['39%', '63%', '88%', '0.56%', '48%', '0.64%', '68']\n"
     ]
    }
   ],
   "source": [
    "if RUN:\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "db67279049854cfab3e3004cf7a5f693",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=170.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    " if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '1.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['1'] = results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/1.mp4' controls>alternative text</video>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Note embedded videos are used for convenience purposes. Given the random processes involved, running the same code will produce slightly different results each time.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   39% | \n",
       "| HIT      | 63%      | \n",
       "| Total      | 88%      | \n",
       "| Fatalities | 0.56%      | \n",
       "| % > 70 | 48%      | \n",
       "| IFR | 0.64%      | \n",
       "| Days to Peak |   68 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['1']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this scenario, **RKnot** closely replicates the curve of a standard SIR model, which expects HIT of 60% for $R_0$ of 2.5 (HIT = 1 - 1 / $R_0$).\n",
    "\n",
    "Variation from the standard SIR model will always result given:\n",
    "\n",
    "1. In the simulation, movement and transmission are stochastic processes.\n",
    "2. This sim does not have an entirely homogeneous population, with different IFRs and varying numbers of contacts between subjects."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Local ####\n",
    "In remaining simulations, we begin to introduce ever increasing homogeneity.\n",
    "\n",
    "Our first change is to adjust the subjects mover functions to `local`. The `local` mover has a strong bias towards locations only in its immediate vicinity, which is a better approximation of real world processes (though certainly not a perfect one)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group1['mover'] = 'local'\n",
    "group2['mover'] = 'local'\n",
    "group3['mover'] = 'local'\n",
    "group4['mover'] = 'local'\n",
    "groups = [group1, group2, group3, group4]\n",
    "\n",
    "sim = Sim(groups=groups, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2e8b5ed279f4459aa48b471b5739547d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['3%', '23%', '47%', '0.38%', '31%', '0.80%', '175']\n"
     ]
    }
   ],
   "source": [
    "### HIDDEN ###\n",
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "\n",
    "    from rknot import Sim, Chart\n",
    "    assert all(g['mover'] == 'local' for g in baseus.groups)\n",
    "\n",
    "if RUN:\n",
    "    sim = Sim(groups=baseus.groups, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "55c9c8f013aa43f39adab20bfd313c7d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=407.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '2.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['2'] = results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/2.mp4' controls>Video Failed To Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   3% | \n",
       "| HIT      | 23%      | \n",
       "| Total      | 47%      | \n",
       "| Fatalities | 0.38%      | \n",
       "| % > 70 | 31%      | \n",
       "| IFR | 0.80%      | \n",
       "| Days to Peak |   175 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if True:\n",
    "    md(results_table(*db['2']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compared to [Example 1](#1.-Equal), we can see that restricting movement has a major impact on spread. The curve is flattened and extended with total infected, peak, HIT, and fatalities all reduce. \n",
    "\n",
    "But the virus is never completely eradicated and instead moves in a progressive wave across the grid space. Note that the infection and fatalitiy levels are somewhat artificially reduced as the virus still has a large susceptible population in the upper portion of the grid that it has not yet reached.\n",
    "\n",
    "*CAUTION: RKnot estimates transmission rate assuming all subjects are* `equal` *movers. Thus, where* `local` *movers are used, the transmission rate may (or may not) be underestimated.*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Social  ####\n",
    "In this simulation, we set `mover=social` for just the 20-49 age group. This is a rough approximation of that group's real-world propensity to travel more frequently (or go to more events)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group1['mover'] = 'local'\n",
    "group2['mover'] = 'social'\n",
    "group3['mover'] = 'local'\n",
    "group4['mover'] = 'local'\n",
    "groups = [group1, group2, group3, group4]\n",
    "\n",
    "sim = Sim(groups=groups, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3f42e5ee7fd4424881ba9bf9aa132b3f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['34%', '58%', '84%', '0.60%', '49%', '0.71%', '65']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    \n",
    "    from rknot import Sim, Chart\n",
    "    \n",
    "    groups = baseus.groups\n",
    "    assert all(g['mover'] == 'local' for g in baseus.groups)\n",
    "    \n",
    "    groups[1]['mover'] = 'social'\n",
    "    \n",
    "if RUN:    \n",
    "    sim = Sim(groups=groups, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6730e9e5c96f4a5b974f8da711e7e624",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=182.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '3.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['3'] = results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/3.mp4' controls>Video Failed To Load</video>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   34% | \n",
       "| HIT      | 58%      | \n",
       "| Total      | 84%      | \n",
       "| Fatalities | 0.60%      | \n",
       "| % > 70 | 49%      | \n",
       "| IFR | 0.71%      | \n",
       "| Days to Peak |   65 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['3']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing again to [Example 1](#1.-Equal), we can see how powerful mixing is within a population. Even with the majority of subjects moving only locally, a small group of subjects is moving more broadly across the space will significantly increase the amount of spread."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Pre-Existing Immunity ####\n",
    "In this scenario, we adjust the susceptibility factor for just two groups by relatively small amounts as follows:\n",
    "\n",
    "+ 20-49: 80%\n",
    "+ 50-69: 65%\n",
    "\n",
    "This means, in the inverse, that 10% and 25% of the subjects in the respective groups are already immune to the virus (whether through pre-existing T-cell immunity, anti-bodies, or otherwise).\n",
    "\n",
    "The older group is assumed to have a lower susceptibility factor as it is more likely that older people will have had more exposure to similar viruses over their lifetime.\n",
    "\n",
    "T-cell immunity to sars-cov-2 remains a controversial subject, but [many studies](https://www.bmj.com/content/370/bmj.m3563) have found prevalance of T-cells between 20% - 50% in *people unexposed to sars-cov-2*. It is suggested that exposure to \"common cold\" coronaviruses (or more dangerous ones) may convey this immunity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group2['susf'] = .8\n",
    "group3['susf'] = .65\n",
    "groups = [group1, group2, group3, group4]\n",
    "\n",
    "sim = Sim(groups=groups, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True) \n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "997d024ebbd04fe8871ce25e4a64e885",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['20%', '39%', '63%', '0.41%', '38%', '0.65%', '84']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    \n",
    "    from rknot import Sim, Chart\n",
    "    \n",
    "    assert all(g['mover'] == 'local' for g in baseus.groups)\n",
    "    \n",
    "    groups = baseus.groups\n",
    "    groups[1]['mover'] = 'social'\n",
    "    groups[1]['susf'] = .8\n",
    "    groups[2]['susf'] = .65\n",
    "if RUN:\n",
    "    sim = Sim(groups=groups, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['4'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "nbsphinx": "hidden",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d0b8e5e611f4e47b7f970cb8f6bfdf0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=218.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '4.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/4.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   20% | \n",
       "| HIT      | 39%      | \n",
       "| Total      | 63%      | \n",
       "| Fatalities | 0.41%      | \n",
       "| % > 70 | 38%      | \n",
       "| IFR | 0.65%      | \n",
       "| Days to Peak |   84 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['4']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Relative to [Example 3](#3.-Social) above, pre-existing immunity would reduce all aspects of the spread curve signifcantly.\n",
    "\n",
    "Note the reduction in fatalities results *even though the most susceptible group is assumed to NOT have pre-existing immunity*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Events ####\n",
    "Certainly, the vast majority of people in the US do not move in such pre-defined ways as set out by the `mover` function. In reality, people tend to move with a local bias with a small number of interactions, supplemented by larger movements to locations with a large number of interactions in a small amount of time.\n",
    "\n",
    "In RKnot, we can simulate this with [Event objects](concepts.ipynb#Events). And we will incorporate a number of them in this simulation. \n",
    "\n",
    "First, we will reset our group parameters by importing from `sims.baseus`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we will instantiate a handful of events recurring periodically over the duration of the sim."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.sims.baseus import params, groups\n",
    "\n",
    "from rknot.events import Event\n",
    "\n",
    "school1 = Event(\n",
    "    name='school1', xy=[25,42], start_tick=2, \n",
    "    groups=[0], capacity=10, recurring=2\n",
    ")\n",
    "school2 = Event(\n",
    "    name='school2', xy=[78,82], start_tick=3, \n",
    "    groups=[0], capacity=10, recurring=2\n",
    ")\n",
    "school3 = Event(\n",
    "    name='school3', xy=[92,32], start_tick=4, \n",
    "    groups=[0], capacity=7, recurring=2\n",
    ")\n",
    "game1 = Event(\n",
    "    name='game1', xy=[50,84], start_tick=6, \n",
    "    groups=[0,1,2,3], capacity=100, recurring=14\n",
    ")\n",
    "game2 = Event(\n",
    "    name='game2', xy=[45,52], start_tick=5, \n",
    "    groups=[0,1,2], capacity=76, recurring=14\n",
    ")\n",
    "game3 = Event(\n",
    "    name='game3', xy=[12,87], start_tick=1, \n",
    "    groups=[0,1,2], capacity=56, recurring=14\n",
    ")\n",
    "game4 = Event(\n",
    "    name='game4', xy=[52,98], start_tick=3, \n",
    "    groups=[1,2], capacity=113, recurring=28\n",
    ")\n",
    "concert1 = Event(\n",
    "    name='concert1', xy=[20,20], start_tick=7, \n",
    "    groups=[0,1], capacity=50, recurring=14\n",
    ")                 \n",
    "concert2 = Event(\n",
    "    name='concert2', xy=[91,92], start_tick=28, \n",
    "    groups=[1], capacity=50, recurring=14\n",
    ")\n",
    "concert3 = Event(\n",
    "    name='concert3', xy=[62,38], start_tick=21, \n",
    "    groups=[2,3], capacity=25, recurring=14\n",
    ")\n",
    "concert4 = Event(\n",
    "    name='concert4', xy=[38,42], start_tick=14, \n",
    "    groups=[1,2], capacity=50, recurring=14\n",
    ")\n",
    "bar1 = Event(\n",
    "    name='bar1', xy=[17,24], start_tick=4, \n",
    "    groups=[1], capacity=5, recurring=3\n",
    ")\n",
    "bar2 = Event(\n",
    "    name='bar2', xy=[87,13], start_tick=5, \n",
    "    groups=[1], capacity=5, recurring=4\n",
    ")\n",
    "bar3 = Event(\n",
    "    name='bar3', xy=[52,89], start_tick=6, \n",
    "    groups=[1,2], capacity=5, recurring=3\n",
    ")\n",
    "bar4 = Event(\n",
    "    name='bar4', xy=[16,27], start_tick=7, \n",
    "    groups=[1,2,3], capacity=4, recurring=7\n",
    ")\n",
    "bar5 = Event(\n",
    "    name='bar5', xy=[89,46], start_tick=6, \n",
    "    groups=[1,2], capacity=7, recurring=7\n",
    ")\n",
    "church = Event(\n",
    "    name='church', xy=[2,91], start_tick=7, \n",
    "    groups=[2,3], capacity=20, recurring=7\n",
    ")\n",
    "\n",
    "events = [\n",
    "    school1, school2, school3, game1, game2, game3, game4, \n",
    "    concert1, concert2, concert3, concert4, \n",
    "    bar1, bar2, bar3, bar4, bar5, church\n",
    "]\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4954e9415c4d4e538349ddd7cf098788",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['30%', '55%', '83%', '0.48%', '36%', '0.58%', '73']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims import baseus\n",
    "\n",
    "    modulereload(baseus)    \n",
    "    assert 'susf' not in baseus.groups[1]    \n",
    "    assert all(g['mover'] == 'local' for g in baseus.groups)\n",
    "\n",
    "if RUN:   \n",
    "    sim = Sim(groups=baseus.groups, events=baseus.events, **baseus.params)\n",
    "    sim.run(dotlog=True)\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['5'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "22390f10d5154a2abda3be3893cc536a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=192.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '5.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/5.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   30% | \n",
       "| HIT      | 55%      | \n",
       "| Total      | 83%      | \n",
       "| Fatalities | 0.48%      | \n",
       "| % > 70 | 36%      | \n",
       "| IFR | 0.58%      | \n",
       "| Days to Peak |   73 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['5']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We've attempted to tailor the event setup so that the infection curve resembles that of [Example 1](#1.-Equal). The theory is that the $R_0$ measured in the early stages of a pandemic should be reflective of actual contacts, not the theoretical contacts of the model.\n",
    "\n",
    "This scenario is not perfectly substitutable with Example 1, however.\n",
    "\n",
    "One measure we can use to compare scenarios is the total number of interactions. We find that under the Event and Gated approaches it takes *more* contacts to result in the same level of spread.\n",
    "\n",
    "Avg Number of Contacts per Subject:\n",
    "\n",
    "Example 1: 50.3\n",
    "\n",
    "Example 2: 52.3 \n",
    "\n",
    "Example 3: 53.4\n",
    "\n",
    "Example 5: 65.5\n",
    "\n",
    "Example 6: 75.5\n",
    "\n",
    "*Average of first 100 days across 5 sims for each scenario.*\n",
    "\n",
    "Other issues with substitutability may exist and are being explored. SIR models determine R0 in the idealized environment of Example 1 and so may not be suitable for customized environments such as this one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. Gates ####\n",
    "We can further improve the real world relevance of interactions by introducing [gates](concepts.ipynb#Gates). Subjects are not always freely able to interact with all other people in a population. Often their movement is restricted to within certain areas. Furthermore, other people's access into those areas is restricted.\n",
    "\n",
    "Elderly people living in retirement homes or assisted living centers is an example. To simulate this, we will split `group4` into two separate groups. \n",
    "\n",
    "* `group4a`\n",
    "    * population of 600 (2/3s of `group4`) \n",
    "    * IFR of 4.2%\n",
    "    * move freely throughout the entire grid as previously\n",
    "* `group4b` \n",
    "    * population of 300 (1/3rd of `group4`)\n",
    "    * IFR of 7.8%\n",
    "    * movement restricted to 6x6 box\n",
    "\n",
    "We have also adjusted the IFR on the basis that `group4b` is likely older and also probably more frail than `group4a`. IFRs approximate those found [here](https://www.publichealthontario.ca/-/media/documents/ncov/epi/2020/06/covid19-epi-case-identification-age-only-template.pdf?la=en).\n",
    "\n",
    "In addition, we will add an event specifically for the new group inside the gate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group4a = dict(\n",
    "    name='70+',\n",
    "    n=600,\n",
    "    n_inf=0,\n",
    "    ifr=0.042,\n",
    "    mover='local',\n",
    ")\n",
    "group4b = dict(\n",
    "    name='70+G',\n",
    "    n=300,\n",
    "    n_inf=0,\n",
    "    ifr=0.0683,\n",
    "    mover='local',\n",
    "    box=[1,6,1,6],\n",
    "    box_is_gated=True,\n",
    ")\n",
    "groups = [group1, group2, group3, group4a, group4b]\n",
    "\n",
    "church2 = Event(\n",
    "    name='church2', xy=[2,3], start_tick=7, \n",
    "    groups=[4], capacity=5, recurring=7\n",
    ")\n",
    "\n",
    "events_gated = [\n",
    "    school1, school2, school3, game1, game2, game3, game4, \n",
    "    concert1, concert2, concert3, concert4, \n",
    "    bar1, bar2, bar3, bar4, bar5, \n",
    "    church, church2,\n",
    "]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, such elderly populations are entirely sealed of from the rest of the world. In fact, they are often visited by family members or friends. We can mimick this with the use of a Travel object.\n",
    "\n",
    "In this sim, at least one person will enter into the `group4b` gate for a day only. And this will repeat every day of the sim."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import Travel\n",
    "\n",
    "visit = Travel(\n",
    "    name='visit', xy=[1,1], start_tick=3, \n",
    "    groups=[1,2], capacity=1, duration=1, recurring=1\n",
    ")\n",
    "events.append(visit)\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4b64eea936104ca8bf3b40c8a17f677b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['29%', '58%', '83%', '0.59%', '49%', '0.71%', '66']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims import baseus\n",
    "    \n",
    "    modulereload(baseus)\n",
    "    assert 'susf' not in baseus.groups_gated[1]    \n",
    "    assert all(g['mover'] == 'local' for g in baseus.groups)\n",
    "    \n",
    "if RUN:\n",
    "    sim = Sim(groups=baseus.groups_gated, events=baseus.events_gated, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['6'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ec8472fbb9c243efb9f18a5db224ca9d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=197.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '6.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/6.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   29% | \n",
       "| HIT      | 58%      | \n",
       "| Total      | 83%      | \n",
       "| Fatalities | 0.59%      | \n",
       "| % > 70 | 49%      | \n",
       "| IFR | 0.71%      | \n",
       "| Days to Peak |   66 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['6']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, the gated structure is intended to mimic [Example 1](#1.-Equal), [Example 3](#3.-Social), and [Example 5](#5.-Events).\n",
    "\n",
    "The use for Events and Gates will become clear when we explore the impact of [Policy Decisions](#Policy)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7. Pre-Immunity with Events and Gates ####\n",
    "Now we can see how pre-immunity might impact viral spread in a population with more heterogeneous interactions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "group2['susf'] = .8\n",
    "group3['susf'] = .65\n",
    "groups = [group1, group2, group3, group4a, group4b]\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "515ec832811d49a4957c036e74fad54f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['17%', '38%', '63%', '0.42%', '39%', '0.67%', '91']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "\n",
    "    assert 'susf' not in baseus.groups_gated[1]    \n",
    "    assert all(g['mover'] == 'local' for g in baseus.groups)\n",
    "\n",
    "    groups_gated = baseus.groups_gated\n",
    "    groups_gated[1]['susf'] = .8\n",
    "    groups_gated[2]['susf'] = .65\n",
    "\n",
    "if RUN:   \n",
    "    sim = Sim(groups=groups_gated, events=baseus.events_gated, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['7'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d49fd7386e8049fd9fca228b1956fe80",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=227.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "    chart.animate.save(PATH + '7.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/7.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   17% | \n",
       "| HIT      | 38%      | \n",
       "| Total      | 63%      | \n",
       "| Fatalities | 0.42%      | \n",
       "| % > 70 | 39%      | \n",
       "| IFR | 0.67%      | \n",
       "| Days to Peak |   91 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['7']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the most interesting curve to-date. We see that an outbreak in the 70+G group occurs very early, resulting a small early peak. This gives the impression of a second wave of infections, when in reality the virus was always spreading consistently in the main population.\n",
    "\n",
    "Despite the early outbreak, once again we see that pre-existing immunity would have the effect of reducing peak infections and HIT.\n",
    "\n",
    "Fatalities were also reduced despite the outbreak in the elderly population, thanks to a lower level of total spread."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 8. Self Aware Social Distancing ####\n",
    "In a self-aware population, we can also incorporate an assumption that certain members of the population will implement social distancing practices even in the absence of prescribed government policy. For example, individuals might wear masks or face shields while in public. \n",
    "\n",
    "This is implemented via a SocialDistancing object, which reduces the transmission factor of the subjects in the applicable group."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import SocialDistancing as SD\n",
    "\n",
    "sd = SD(name='6-feet', tmfs=[.975,.95,.75,.5], groups=[1,2,3,4], start_tick=5, duration=90)\n",
    "events.append(sd)\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d6bab2ad726241069f68cd3068f29537",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['26%', '55%', '81%', '0.49%', '37%', '0.60%', '79']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    groups_gated = baseus.groups_gated\n",
    "    events_gated = baseus.events_gated\n",
    "    \n",
    "    assert 'susf' not in baseus.groups_gated[1]\n",
    "    assert len(events_gated) == 19\n",
    "\n",
    "    from rknot.events import SocialDistancing as SD\n",
    "    \n",
    "    sd = SD(name='6-feet', tmfs=[.975,.95,.75,.5], groups=[1,2,3,4], start_tick=5, duration=90)\n",
    "    events_gated.append(sd)\n",
    "\n",
    "if RUN:\n",
    "    sim = Sim(groups=groups_gated, events=events_gated, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['8'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4730df247ed34810a677914d25f0a526",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=212.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    sim1\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + '8.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/8.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   26% | \n",
       "| HIT      | 55%      | \n",
       "| Total      | 81%      | \n",
       "| Fatalities | 0.49%      | \n",
       "| % > 70 | 37%      | \n",
       "| IFR | 0.60%      | \n",
       "| Days to Peak |   79 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['8']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Social distancing does flatten the infection curve, resulting in a modest decrease in peak infections and HIT and delaying the peak slightly. Fatalities are also reduced."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9. Self Aware Social Distancing + Pre-Immunity ####\n",
    "In a self-aware population, we can also incorporate an assumption that certain members of the population will implement social distancing practices (even in the absence of prescribed government policy). For example, individuals might wear masks or face shields while in public. \n",
    "\n",
    "This is implemented via a SocialDistancing object, which reduces the transmission factor of the subjects in the applicable group."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import SocialDistancing as SD\n",
    "\n",
    "sd = SD(name='6-feet', tmfs=[.975,.95,.75,.5], groups=[1,2,3,4], start_tick=5, duration=90)\n",
    "events.append(sd)\n",
    "\n",
    "sim = Sim(groups=groups, events=events, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9c629715749e45e8863d2c1c2ae0c898",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['22%', '43%', '63%', '0.40%', '35%', '0.64%', '122']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot import Sim, Chart\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    assert len(baseus.events_gated) == 19\n",
    "    assert 'susf' not in baseus.groups_gated[1]\n",
    "\n",
    "    from rknot.events import SocialDistancing as SD\n",
    "    \n",
    "    groups_gated = baseus.groups_gated\n",
    "    events_gated = baseus.events_gated\n",
    "\n",
    "    groups_gated[1]['susf'] = .8\n",
    "    groups_gated[2]['susf'] = .65    \n",
    "\n",
    "\n",
    "    sd = SD(name='6-feet', tmfs=[.975,.95,.75,.5], groups=[1,2,3,4], start_tick=5, duration=90)\n",
    "    events_gated.append(sd)\n",
    "if RUN:\n",
    "    sim = Sim(groups=groups_gated, events=events_gated, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5d216bf9a1944661bdb0101a469c8834",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=249.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + '9.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['9'] = results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/9.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   22% | \n",
       "| HIT      | 43%      | \n",
       "| Total      | 63%      | \n",
       "| Fatalities | 0.40%      | \n",
       "| % > 70 | 35%      | \n",
       "| IFR | 0.64%      | \n",
       "| Days to Peak |   122 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['9']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see that just the combination of pre-immunity and a modest amount of social distancing reduces all aspects of the infection curve.\n",
    "\n",
    "Social distancing among the most susceptible (i.e. `group4b`) was a key factor in a the reduced fatality rate.\n",
    "\n",
    "Essentially, in this simulation, social distancing prevented an outbreak in the `group4b` community (whereas outbreaks had previously occured there in prior sims).\n",
    "\n",
    "While these are all positives, note also that the outbreak occurs only AFTER social distancing is abandoned. So social distancing practices are helpful only so long as they are maintained."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 10. Isolation ####\n",
    "TBD"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Policy ###\n",
    "\n",
    "With a more realistic model of subject interaction, we can begin to experiment with the impact of different policy measures.\n",
    "\n",
    "*RKnot* can simulate policy measures via `Restriction`, `SocialDistancing`, and `Quarantine` objects. Further details [here](concepts.ipynb#Restrictions).\n",
    "\n",
    "The simulations are based on [this scenario](#6.-Gates) and so the impact of the policy measures contemplated should be considered relative to that scenario.\n",
    "\n",
    "The structure can be imported as follows:\n",
    "\n",
    "```python\n",
    "from rknot.sims.baseus import params, events_gated, groups_gated\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "import matplotlib\n",
    "matplotlib.use('Qt5Agg')\n",
    "\n",
    "from matplotlib.animation import FFMpegWriter\n",
    "\n",
    "from rknot import Sim, Chart"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Restrict Large Gatherings ####\n",
    "We'll start by simply restricting large gathers, which for this sim is any event with 10+ capacity (0.1% of the entire population). The restrictions will last for 60 days.\n",
    "\n",
    "When considering capacity, remember that a 100,000-seat stadium in a 10 million person catchment represents 1% of the population.\n",
    "\n",
    "We assume this policy are implemented on day 30, when the population finally realizes there is a pandemic and government has had time to implement prevention measures.\n",
    "\n",
    "The restriction will last for 60 days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import Restriction\n",
    "\n",
    "large_gatherings = Restriction(\n",
    "    name='large', start_tick=30, duration=60, criteria={'capacity': 10}\n",
    ")\n",
    "events_w_res = events_gated + [large_gatherings]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, details=True, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---------------------------------------------------------------------------------\n",
      "|                                  SIM DETAILS                                  |\n",
      "|-------------------------------------------------------------------------------|\n",
      "|           Boundary|  [  1 100   1 100]|          Locations|             10,000|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|         Population|             10,000|            Density|                1.0|\n",
      "|-------------------|-------------------|-------------------|-------------------|\n",
      "|       Contact Rate|                1.0|                   |                   |\n",
      "|-------------------|-------------------|-------------------|-------------------|\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4c219ff49eda4ac6b8ab10cdf8cd47a9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['15%', '37%', '72%', '0.44%', '34%', '0.61%', '86']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    assert len(baseus.events_gated) == 19\n",
    "    assert 'susf' not in baseus.groups_gated[1]    \n",
    "    \n",
    "    from rknot.events import Restriction\n",
    "\n",
    "    large_gatherings = Restriction(\n",
    "        name='large', start_tick=30, duration=120, criteria={'capacity': 10}\n",
    "    )\n",
    "    events_w_res = baseus.events_gated + [large_gatherings]\n",
    "if RUN:\n",
    "    sim = Sim(groups=baseus.groups_gated, events=events_w_res, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['large'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "894dfe7edf264fc8896b10209cce2562",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=283.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + 'large.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/large.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   15% | \n",
       "| HIT      | 37%      | \n",
       "| Total      | 72%      | \n",
       "| Fatalities | 0.44%      | \n",
       "| % > 70 | 34%      | \n",
       "| IFR | 0.61%      | \n",
       "| Days to Peak |   86 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['large']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that the curve is flattened significantly during the restriction period. Infections have a much lower peak, BUT also a much longer tail (evident by the still high relatively high level of total infections).\n",
    "\n",
    "This results as the event restriction is lifted, which leads to a slower rate of decline of the virus."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2. Social Distancing ####\n",
    "We can mimick the implementation of Social Distancing policies in certain settings via the `SocialDistancing` object. Mask wearing, hand sanitizing, and 6-foot perimeters all provide varying levels of protection.\n",
    "\n",
    "It is hard to estimate the degree of protection from each, and even harder in combination. For instance, [this study](https://pubmed.ncbi.nlm.nih.gov/23498357/) found anywhere between a 1.1- and 55-fold reduction in exposure to influenza with varying mask designs.\n",
    "\n",
    "So we provide `tmfs` here for illustration purposes only, attempting to catch all social distancing practices. We also provide different `tmfs` for the different age groups, meant to simulate adherence to policy.\n",
    "\n",
    "The policy measure is implemented on day 30 and maintained for 120 days."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import SocialDistancing as SD\n",
    "\n",
    "sd = SD(\n",
    "    name='all', tmfs=[.8,.8,.7,.65,.5], \n",
    "    groups=[0,1,2,3,4], start_tick=30, duration=120\n",
    ")\n",
    "events_w_res = events_gated + [sd]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ce3ee6dc953542ad95964e4376772b11",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['10%', '21%', '68%', '0.38%', '28%', '0.56%', '73']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    assert len(baseus.events_gated) == 19\n",
    "    assert 'susf' not in baseus.groups_gated[1]\n",
    "if RUN:\n",
    "    from rknot.events import SocialDistancing as SD\n",
    "\n",
    "    sd = SD(name='all', tmfs=[.8,.8,.7,.65,.5], groups=[0,1,2,3,4], start_tick=30, duration=120)\n",
    "    events_w_res = baseus.events_gated + [sd]\n",
    "\n",
    "    sim = Sim(groups=baseus.groups_gated, events=events_w_res, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "015709b6478c428f84490d27ca525b87",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=407.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + 'policy_sd.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['policy_sd'] = results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "       src='https://storage.googleapis.com/rknotvids/baseus/policy_sd.mp4' controls>Video Failed to Load</video>\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false,
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   10% | \n",
       "| HIT      | 21%      | \n",
       "| Total      | 68%      | \n",
       "| Fatalities | 0.38%      | \n",
       "| % > 70 | 28%      | \n",
       "| IFR | 0.56%      | \n",
       "| Days to Peak |   73 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if RUN:\n",
    "    md(results_table(*db['policy_sd']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that social distancing is certainly the most effective approach in terms of \"flattening the curve\" with the lowest HIT and peak infections seen thus far. \n",
    "\n",
    "In this sim, however, social distancing still allows for an early, significant outbreak in the 70+G group (even while the restrictions are in place). This create a seemingly rapid increase in infections similar to a standard curve. Once HIT is reached within the 70+G group, social distancing practices in the broader population are able to temper spread and the curve declines.\n",
    "\n",
    "The virus continues to linger, however, and infections increase in smaller second wave once the social distancing policy is lifted."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3. Restrict Elderly Visits ####\n",
    "We can restrict events by name by passing `name` key to `criteria`. We can do this to restrict the travel event to the `70+G` area. \n",
    "\n",
    "The policy measure is implemented on day 30 and maintained for another 120 days. There will be no other restrictions.\n",
    "\n",
    "```python\n",
    "no_visits = Restriction(\n",
    "    name='no_visits', start_tick=30, \n",
    "    duration=120, criteria={'name': 'visit'}\n",
    ")\n",
    "events_w_res = events_gated + [no_visits]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2f15b4d003bc48f18fcc68d037ea5824",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['30%', '55%', '80%', '0.29%', '20%', '0.36%', '64']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    assert len(baseus.events_gated) == 19\n",
    "    assert 'susf' not in baseus.groups_gated[1]\n",
    "if RUN:\n",
    "    from rknot.events import Restriction    \n",
    "    no_visits = Restriction(\n",
    "        name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    "    )\n",
    "    events_w_res = baseus.events_gated + [no_visits]\n",
    "\n",
    "    sim = Sim(groups=baseus.groups_gated, events=events_w_res, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['no_visits'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e2a52c3f935646efbc32df8732f818ea",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=192.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + 'no_visits.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/no_visits.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   30% | \n",
       "| HIT      | 55%      | \n",
       "| Total      | 80%      | \n",
       "| Fatalities | 0.29%      | \n",
       "| % > 70 | 20%      | \n",
       "| IFR | 0.36%      | \n",
       "| Days to Peak |   64 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "md(results_table(*db['no_visits']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By simply quarantining the elderly, we see the most dramatic reduction in fatalities of any scenario thus far. An outbreak NEVER occurs in the 70+G gated area, even AFTER the policy restrictions are lifted, because the virus has already been eradicated by that time. \n",
    "\n",
    "We can see here that allowing a *high level of infection* among the **least susceptible** has resulted in a *low level of fatalities* among the **most susceptible**.\n",
    "\n",
    "This is a controversial approach and does have difficult ethical implications, but its power to reduce death cannot be ignored."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Social Distancing and Restrict Elderly Visits and Large Gatherings ####\n",
    "What happens if we combine the three approaches above?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "large_gatherings = Restriction(\n",
    "    name='large', start_tick=30, duration=60, criteria={'capacity': 10}\n",
    ")\n",
    "no_visits = Restriction(\n",
    "    name='no_visits', start_tick=30, \n",
    "    duration=120, criteria={'name': 'visit'}\n",
    ")\n",
    "sd = SD(\n",
    "    name='all', tmfs=[.8,.8,.7,.65,.5], \n",
    "    groups=[0,1,2,3,4], start_tick=30, duration=120\n",
    ")\n",
    "events_w_res = events_gated + [large_gatherings, no_visits, sd]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f283ae133ae042ff9a5261b541b1989f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['24%', '55%', '81%', '0.53%', '39%', '0.65%', '205']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    assert len(baseus.events_gated) == 19\n",
    "    assert 'susf' not in baseus.groups_gated[1]\n",
    "if RUN:\n",
    "    large_gatherings = Restriction(\n",
    "        name='large', start_tick=30, duration=120, criteria={'capacity': 10}\n",
    "    )\n",
    "    no_visits = Restriction(\n",
    "        name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    "    )\n",
    "    sd = SD(name='all', tmfs=[.8,.8,.7,.65,.5], groups=[0,1,2,3,4], start_tick=30, duration=120)\n",
    "    events_w_res = baseus.events_gated + [large_gatherings, no_visits, sd]\n",
    "\n",
    "    sim = Sim(groups=baseus.groups_gated, events=events_w_res, **baseus.params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['sd_large_no_visits'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a8572fd1db314ad3aa386c6bf2495253",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=339.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)    \n",
    "    chart.animate.save(PATH + 'sd_&_no_large_&_no_visits.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "    src='https://storage.googleapis.com/rknotvids/baseus/sd_%26_no_large_%26_no_visits.mp4' controls>Video Failed to Load</video>\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   24% | \n",
       "| HIT      | 55%      | \n",
       "| Total      | 81%      | \n",
       "| Fatalities | 0.53%      | \n",
       "| % > 70 | 39%      | \n",
       "| IFR | 0.65%      | \n",
       "| Days to Peak |   205 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "md(results_table(*db['sd_large_no_visits']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Incredibly, the combination of restrictions leads to worse outcomes than any of the individual restrictions on their own.\n",
    "\n",
    "While in place, the restrictions do tightly contain infections and signficantly delay the onset of the pandemic. But once they are lifted, the virus spreads unabated through a still highly susceptible population.\n",
    "\n",
    "i.e. Not enough subjects have achieved immunity by the time the restrictions are lifted."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Quarantine ####\n",
    "We can even mimick the impact of quarantines via the Quarantine object.\n",
    "\n",
    "Here we show the impact of a 30-day quarantine for all groups in the Sim."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot.events import Quarantine\n",
    "\n",
    "quarantine = Quarantine(\n",
    "    name='all', start_tick=30, \n",
    "    groups=[0,1,2,3,4], duration=30\n",
    ")\n",
    "events_w_res = events_gated + [quarantine]\n",
    "\n",
    "sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "70bf5a1a3ebc43248e0e37b71e27c0ca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=365.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "['0%', '0%', '0%', '0.00%', '0%', '0.00%', '34']\n"
     ]
    }
   ],
   "source": [
    "if IMPORT:\n",
    "    from rknot.sims import baseus\n",
    "    modulereload(baseus)\n",
    "    assert len(baseus.events_gated) == 19\n",
    "    assert 'susf' not in baseus.groups_gated[1]\n",
    "if RUN:\n",
    "    from rknot.events import Quarantine\n",
    "\n",
    "    quarantine = Quarantine(name='all', start_tick=30, groups=[0,1,2,3,4], duration=30)\n",
    "    events_w_res = events_gated + [quarantine]\n",
    "\n",
    "    sim = Sim(groups=groups_gated, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "    print (get_results(sim))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['quarantine'] = results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "45b0c28ff1db4486a09d2267d9c74456",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=90.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if SAVE_CHARTS:\n",
    "    chart = Chart(sim, use_init_func=True)        \n",
    "    chart.animate.save(PATH + 'quarantine.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "       src='https://storage.googleapis.com/rknotvids/baseus/quarantine.mp4' controls>Video Failed to Load</video>\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   0% | \n",
       "| HIT      | 0%      | \n",
       "| Total      | 0%      | \n",
       "| Fatalities | 0.00%      | \n",
       "| % > 70 | 0%      | \n",
       "| IFR | 0.00%      | \n",
       "| Days to Peak |   34 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "md(results_table(*db['quarantine']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The pandemic never materializes in this simulation. The quarantine eradicates the virus swiftly. \n",
    "\n",
    "This is an interesting result. This obvioulsy did not occur in many places in the real world that took this approach. There are several possible reasons worth considering:\n",
    "\n",
    "* Random Variation: if you run this simulation multiple times, you will note some sims where spread does occur.\n",
    "* Scale: a larger simulation would increase the possibility that a very small number of subjects can continue to pass around the virus while it is muted in the broader population\n",
    "* Adherence: real-world adherence to the implemented policies was much lower than this simulation suggests.\n",
    "* Inconsistency: some areas implemented strict quarantines while others did not, and there was mixing among those populations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### A Fulsome Scenario ###\n",
    "\n",
    "We'll now create a more fulsome scenario encompassing many of the factors discussed.\n",
    "\n",
    "Adjustments to prior scenarios include:\n",
    "\n",
    "* add additional group with `mover='social'` in the 20-49 cohort. this cohort also flaunts social distancing guidelines as so its tmf in the SD object is `1.25`\n",
    "* add susceptibility factors for most groups\n",
    "* more fine-tuned capacity restrictions that gradually allow larger events over time\n",
    "* restrict visits to the elderly for a full year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "### GROUPS ###\n",
    "group1 = dict(\n",
    "    name='0-19',\n",
    "    n=2700,\n",
    "    n_inf=0,\n",
    "    ifr=0.00003,\n",
    "    mover='local',\n",
    ")\n",
    "group2a = dict(\n",
    "    name='20-49L',\n",
    "    n=3900,\n",
    "    n_inf=1,\n",
    "    ifr=0.0002,\n",
    "    mover='local',\n",
    "    susf=0.85,    \n",
    ")\n",
    "group2b = dict(\n",
    "    name='20-49S',\n",
    "    n=200,\n",
    "    n_inf=1,\n",
    "    ifr=0.0002,\n",
    "    mover='social',\n",
    "    susf=0.85,    \n",
    ")\n",
    "group3 = dict(\n",
    "    name='50-69',\n",
    "    n=2300,\n",
    "    n_inf=1,\n",
    "    ifr=0.005,\n",
    "    susf=.7,\n",
    "    mover='local',\n",
    ")\n",
    "group4a = dict(\n",
    "    name='70+',\n",
    "    n=600,\n",
    "    n_inf=0,\n",
    "    ifr=0.042,\n",
    "    mover='local',\n",
    "    susf=0.9,    \n",
    ")\n",
    "group4b = dict(\n",
    "    name='70+G',\n",
    "    n=300,\n",
    "    n_inf=0,\n",
    "    ifr=0.0683,\n",
    "    mover='local',\n",
    "    box=[1,6,1,6],\n",
    "    box_is_gated=True,\n",
    ")\n",
    "groups = [group1, group2a, group2b, group3, group4a, group4b]\n",
    "params = {'dlevel': 'med', 'Ro':2.5, 'days': 365, 'imndur': 365, 'infdur': 14}\n",
    "\n",
    "### EVENTS ###\n",
    "from rknot.events import Event, Travel\n",
    "\n",
    "school1 = Event(name='school1', xy=[25,42], start_tick=2, groups=[0], capacity=10, recurring=2)\n",
    "school2 = Event(name='school2', xy=[78,82], start_tick=3, groups=[0], capacity=10, recurring=2)\n",
    "game = Event(name='game', xy=[50,84], start_tick=6, groups=[0,1,2,3], capacity=100, recurring=14)\n",
    "concert1 = Event(name='concert1', xy=[20,20], start_tick=7, groups=[1,2], capacity=50, recurring=14)                 \n",
    "concert2 = Event(name='concert2', xy=[91,92], start_tick=21, groups=[1,2], capacity=50, recurring=14)\n",
    "bar = Event(name='bar', xy=[17,24], start_tick=4, groups=[1,2], capacity=5, recurring=7)\n",
    "bar2 = Event(name='bar2', xy=[87,13], start_tick=5, groups=[1,2], capacity=5, recurring=7)\n",
    "bar3 = Event(name='bar3', xy=[52,89], start_tick=6, groups=[1,2,3], capacity=5, recurring=7)\n",
    "church = Event(name='church', xy=[2,91], start_tick=7, groups=[3,4], capacity=20, recurring=7)\n",
    "church2 = Event(name='church', xy=[2,3], start_tick=7, groups=[5], capacity=5, recurring=7)\n",
    "\n",
    "visit = Travel(name='visit', xy=[1,1], start_tick=3, groups=[1,2,3], capacity=1, duration=1, recurring=1)\n",
    "\n",
    "events = [\n",
    "    school1, school2,\n",
    "    game, concert1, concert2, bar, bar2, bar3, \n",
    "    church, church2, visit,\n",
    "]\n",
    "\n",
    "### RESTRICTIONS ###\n",
    "small_gatherings = Restriction(\n",
    "    name='small', start_tick=30, duration=30, criteria={'capacity': 5}\n",
    ")\n",
    "med_gatherings = Restriction(\n",
    "    name='med', start_tick=60, duration=30, criteria={'capacity': 10}\n",
    ")\n",
    "large_gatherings = Restriction(\n",
    "    name='large', start_tick=90, duration=30, criteria={'capacity': 50}\n",
    ")\n",
    "no_visits = Restriction(\n",
    "    name='no_visits', start_tick=30, duration=365, criteria={'name': 'visit'}\n",
    ")\n",
    "sd = SD(name='all', tmfs=[.8, .8, 1.25, .7,.65,.5], groups=[0,1,2,3,4,5], start_tick=30, duration=120)\n",
    "events_w_res = events + [small_gatherings, med_gatherings, large_gatherings, no_visits, sd]\n",
    "\n",
    "sim = Sim(groups=groups, events=events_w_res, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, use_init_func=True)\n",
    "chart.animate.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "### HIDDEN ###\n",
    "if RUN:\n",
    "    ### GROUPS ###\n",
    "    group1 = dict(\n",
    "        name='0-19',\n",
    "        n=2700,\n",
    "        n_inf=0,\n",
    "        ifr=0.00003,\n",
    "        mover='local',\n",
    "    )\n",
    "    group2a = dict(\n",
    "        name='20-49L',\n",
    "        n=3900,\n",
    "        n_inf=1,\n",
    "        ifr=0.0002,\n",
    "        mover='local',\n",
    "        susf=0.85,    \n",
    "    )\n",
    "    group2b = dict(\n",
    "        name='20-49S',\n",
    "        n=200,\n",
    "        n_inf=1,\n",
    "        ifr=0.0002,\n",
    "        mover='social',\n",
    "        susf=0.85,    \n",
    "    )\n",
    "    group3 = dict(\n",
    "        name='50-69',\n",
    "        n=2300,\n",
    "        n_inf=1,\n",
    "        ifr=0.005,\n",
    "        susf=.7,\n",
    "        mover='local',\n",
    "    )\n",
    "    group4a = dict(\n",
    "        name='70+',\n",
    "        n=600,\n",
    "        n_inf=0,\n",
    "        ifr=0.042,\n",
    "        mover='local',\n",
    "        susf=0.9,    \n",
    "    )\n",
    "    group4b = dict(\n",
    "        name='70+G',\n",
    "        n=300,\n",
    "        n_inf=0,\n",
    "        ifr=0.0683,\n",
    "        mover='local',\n",
    "        box=[1,6,1,6],\n",
    "        box_is_gated=True,\n",
    "    )\n",
    "    groups = [group1, group2a, group2b, group3, group4a, group4b]\n",
    "    params = {'dlevel': 'med', 'Ro':2.5, 'days': 365, 'imndur': 365, 'infdur': 14}\n",
    "\n",
    "    ### EVENTS ###\n",
    "    from rknot.events import Event, Travelx\n",
    "\n",
    "    school1 = Event(name='school1', xy=[25,42], start_tick=2, groups=[0], capacity=10, recurring=2)\n",
    "    school2 = Event(name='school2', xy=[78,82], start_tick=3, groups=[0], capacity=10, recurring=2)\n",
    "    game = Event(name='game', xy=[50,84], start_tick=6, groups=[0,1,2,3], capacity=100, recurring=14)\n",
    "    concert1 = Event(name='concert1', xy=[20,20], start_tick=7, groups=[1,2], capacity=50, recurring=14)                 \n",
    "    concert2 = Event(name='concert2', xy=[91,92], start_tick=21, groups=[1,2], capacity=50, recurring=14)\n",
    "    bar = Event(name='bar', xy=[17,24], start_tick=4, groups=[1,2], capacity=5, recurring=7)\n",
    "    bar2 = Event(name='bar2', xy=[87,13], start_tick=5, groups=[1,2], capacity=5, recurring=7)\n",
    "    bar3 = Event(name='bar3', xy=[52,89], start_tick=6, groups=[1,2,3], capacity=5, recurring=7)\n",
    "    church = Event(name='church', xy=[2,91], start_tick=7, groups=[3,4], capacity=20, recurring=7)\n",
    "    church2 = Event(name='church', xy=[2,3], start_tick=7, groups=[5], capacity=5, recurring=7)\n",
    "\n",
    "    visit = Travel(name='visit', xy=[1,1], start_tick=3, groups=[1,2,3], capacity=1, duration=1, recurring=1)\n",
    "\n",
    "    events = [\n",
    "        school1, school2,\n",
    "        game, concert1, concert2, bar, bar2, bar3, \n",
    "        church, church2, visit,\n",
    "    ]\n",
    "\n",
    "    ### RESTRICTIONS ###\n",
    "    small_gatherings = Restriction(\n",
    "        name='small', start_tick=30, duration=30, criteria={'capacity': 5}\n",
    "    )\n",
    "    med_gatherings = Restriction(\n",
    "        name='med', start_tick=60, duration=30, criteria={'capacity': 10}\n",
    "    )\n",
    "    large_gatherings = Restriction(\n",
    "        name='large', start_tick=90, duration=30, criteria={'capacity': 50}\n",
    "    )\n",
    "    no_visits = Restriction(\n",
    "        name='no_visits', start_tick=30, duration=120, criteria={'name': 'visit'}\n",
    "    )\n",
    "    sd = SD(name='all', tmfs=[.8, .8, 1.25, .7,.65,.5], groups=[0,1,2,3,4,5], start_tick=30, duration=120)\n",
    "    events_w_res = events + [small_gatherings, med_gatherings, large_gatherings, no_visits, sd]\n",
    "\n",
    "    sim = Sim(groups=groups, events=events_w_res, **params)\n",
    "    sim.run()\n",
    "\n",
    "    chart = Chart(sim, use_init_func=True)\n",
    "if SAVE_CHARTS:\n",
    "    chart.animate.save(PATH + 'fulsome.mp4', writer=FFMpegWriter(fps=10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "if SAVE:\n",
    "    results = get_results(sim)\n",
    "    db['ful'] = results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340'\n",
    "       src='https://storage.googleapis.com/rknotvids/baseus/fulsome.mp4' controls>Video Failed to Load</video>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [],
   "source": [
    "md(results_table(*db['ful']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The virus barely survives for the first 6-months of the outbreak, then as per other scenarios, once restrictions are lifted an outbreak occurs. Still, when the outbreak does occur, it is characterized by one of the lowest peaks and HITs in our analysis (due in part to the pre-immmunity of some of the groups).\n",
    "\n",
    "And it achieves the lowest fatality rate of the group, mainly by restricting access to the elderly population for the duration of the pandemic and ensuring an outbreak never occurs in that region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.save_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "move_to_doc_folder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
