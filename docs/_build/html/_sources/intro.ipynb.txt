{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "    BETA RELEASE\n",
    "    \n",
    "    This project remains in the experimental stage and there are likely many tweaks to come that will improve/change outcomes.\n",
    "</div>\n",
    "\n",
    "Introduction\n",
    "---\n",
    "**RKnot** is a simulation architecture for viral spread that aims to:\n",
    "\n",
    "1. Faithfully replicate spread in real world conditions\n",
    "2. Investigate the impacts of policy decisions and other interventions\n",
    "3. Provide visualization tools for ease-of-presentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**RKnot** attempts to distinguish itself from prevailing models by:\n",
    "\n",
    "+ allowing for customized population sizes and demographics\n",
    "+ supporting more realistic movement and contact patterns\n",
    "+ modulating transmission risk to account for different subject behvior and location properties\n",
    "+ restricting specific interactions via an array of interventions that can be used in any combination\n",
    "\n",
    "**RKnot** utilizes parallelization via [Ray](https://docs.ray.io/en/master/index.html) and JIT-compilation via [Numba](https://numba.pydata.org/) for performance improvements amd [Matplotlib](https://matplotlib.org/) for visualizaitons."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "    Note\n",
    "    \n",
    "    Documentation examples focus on **sars-cov-2**, however, **RKnot** can be used to simulate <em>any</em> virus, or anything that spreads like a virus.\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Example ###\n",
    "\n",
    "A simulation and visualization can be completed in a few quick lines of code. The user need only specify a dictionary describing the population, `group`, and a handful of parameters describing the simulation space and viral characteristics.\n",
    "\n",
    "Below we simulate:\n",
    "\n",
    "* a population of 1,000 subjects,\n",
    "* beginning with five initially infected;\n",
    "<p></p>\n",
    "* a density of 1 subject per location\n",
    "* a maximum simulation length of 150 days \n",
    "    * *the simulation will automatically stop when there are no more infections*\n",
    "<p></p>\n",
    "+ an initial reproduction number, $R_0$, of 3\n",
    "+ an infection duration of 14 days\n",
    "+ an immunity duration of 365"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "from rknot import Sim, Chart\n",
    "\n",
    "group = {'n': 1000, 'n_inf': 5}\n",
    "params = {'R0': 3,'imndur': 365, 'infdur': 14, 'density': 1, 'days': 150}\n",
    "\n",
    "\n",
    "sim = Sim(groups=group, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim)\n",
    "chart.to_html5_video()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "13734bc98e9641c4ae05f3a9aed8db99",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=150.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "from rknot import Sim, Chart\n",
    "\n",
    "group = {'n': 1000, 'n_inf': 5}\n",
    "params = {'R0': 3,'imndur': 365, 'infdur': 14, 'density': 1, 'days': 150}\n",
    "\n",
    "\n",
    "sim = Sim(groups=group, **params)\n",
    "sim.run()\n",
    "\n",
    "chart = Chart(sim, dotsize=2, reso_format='web').save('vids/intro/basic_example.mp4')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<video width='705' height='340' \n",
    "    src='https://storage.googleapis.com/rknotvids/intro/basic_example.mp4' controls>alternative text</video>\n",
    "<p></p>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "tags": [
     "hide_input"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/markdown": [
       "Results: \n",
       "\n",
       "|      |      | \n",
       "| ------------- |:-------------:| \n",
       "| Peak      |   53% | \n",
       "| HIT      | 70%      | \n",
       "| Total      | 93%      | \n",
       "| Fatalities | 0.40%      | \n",
       "| IFR | 0.43%      | \n",
       "| Days to Peak |   29 | \n"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from rknot.helpers import md, results_table, get_results\n",
    "\n",
    "md(results_table(*get_results(sim), over70=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As per the chart, this simulation results in a peak at 29 days, with 53% of the population infected at the peak and a Herd Immunity Threshold of 70%. In total 93% of the population was infected and 0.4% of the population, or 4 subjects, died."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Next Steps ###\n",
    "\n",
    "+ [Here you can explore how viral spread theory is incorporate into *RKnot*.](theory.ipynb)\n",
    "\n",
    "+ [Here you can learn about the core concepts on which the simulation architecture is built.](concepts.ipynb)\n",
    "\n",
    "Or you can jump right into the example simulations we have built and explore how different properities impact spread:\n",
    "\n",
    "+ [Factors Influencing Spread](sir.ipynb)\n",
    "+ [Impact of Dynamce Transmission Risk](load.ipynb)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "IPython.notebook.save_notebook()\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "IPython.notebook.save_notebook()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'move_to_doc_folder' from 'rknot.helpers' (/Users/spindicate/Documents/programming/rknot/rknot/helpers.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-63376d6cce5f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mrknot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhelpers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmove_to_doc_folder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmove_to_doc_folder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'intro.ipynb'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'move_to_doc_folder' from 'rknot.helpers' (/Users/spindicate/Documents/programming/rknot/rknot/helpers.py)"
     ]
    }
   ],
   "source": [
    "from rknot.notebook import move_to_doc_folder\n",
    "move_to_doc_folder('intro.ipynb')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
